/*
 * Main module for testing the PWM Code for the K64F
 * 
 * Author:  
 * Created:  
 * Modified: Carson Clarke-Magrab <ctc7359@rit.edu> 
 * LJBeato
 * 2021
 */

#include "msp.h"
#include "uart.h"
#include "TimerA.h"
#include "servo.h"


/**
 * Waits for a delay (in milliseconds)
 * 
 * del - The delay in milliseconds
 */
void delay(int del){
	volatile int i;
	for (i=0; i<del*50000; i++){
		;// Do nothing
	}
}

int main(void) {
	// Initialize UART and PWM
	// INSERT CODE HERE
	uart0_init();
	
	//TIMER_A0_PWM_Init(1200, 0.0, 1);
	//TIMER_A0_PWM_Init(1200, 0.0, 4);
	
	// Print welcome over serial
	uart0_put("Running... \n\r");
	

	// Generate 20% duty cycle at 10kHz
	// INSERT CODE HERE
	
	//for(;;) ;  //then loop forever
	
	
	/*for(;;)  //loop forever
	{
		uint16_t dc = 0;
		uint16_t freq = 10000; // Frequency = 10 kHz 
		uint16_t dir = 0;
		char c = 48;
		int i=0;
		
		// 0 to 100% duty cycle in forward direction
		for (i=0; i<100; i++) {
		    // INSERT CODE HERE
			TIMER_A0_PWM_DutyCycle(i/100.0,1);
			delay(10);
		}
		
		// 100% down to 0% duty cycle in the forward direction
		for (i=100; i>=0; i--) {
		    // INSERT CODE HERE
			TIMER_A0_PWM_DutyCycle(i/100.0,1);
			delay(10);
		}
		TIMER_A0_PWM_DutyCycle(0.0,1);
		// 0 to 100% duty cycle in reverse direction
		for (i=0; i<100; i++) {
		    // INSERT CODE HERE
			TIMER_A0_PWM_DutyCycle(i/100.0,4);
			delay(10);
		}
		
		// 100% down to 0% duty cycle in the reverse direction
		for (i=100; i>=0; i--) {
		    // INSERT CODE HERE
			TIMER_A0_PWM_DutyCycle(i/100.0,4);
			delay(10);
		}

	}*/
	P3->SEL0 &= ~(BIT6 | BIT7);
	P3->SEL1 &= ~(BIT6 | BIT7);
	P3->DIR |= (BIT6 | BIT7);
	P3->OUT |= (BIT6 | BIT7);
	servo_init();
	TIMER_A0_PWM_Init(1200, 0.3, 1);
	TIMER_A0_PWM_Init(1200, 0.3, 3);
	for(;;){
		servo_run(0.05);
		delay(10);
		servo_run(0.075);
		delay(10);
		servo_run(0.1);
		delay(10);
		servo_run(0.075);
		delay(10);
	}
	return 0;
}



