Analysis of Qn Selection
-------------------------
Found the root 0.000099 using Qn 20 interger bisection.
Elapsed CPU Time timer = 1.08 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.160000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 2.03 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 4.060000e-07 seconds
Qn 20 error= -1.392593

Found the root 0.000100 using Qn 21 interger bisection.
Elapsed CPU Time timer = 1.04 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.080000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 2.03 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 4.060000e-07 seconds
Qn 21 error= -0.444444

Found the root 0.000100 using Qn 23 interger bisection.
Elapsed CPU Time timer = 1.03 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.060000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 2.04 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 4.080000e-07 seconds
Qn 23 error= -0.088889

In exploring the optimal Qn value for the integer bisection method, a range 
from
 20 to 24 was tested. QN 20 gave a percentage error of -1.392593, QN 21 gave 
 -0.44444 and QN 23 gave -0.088889. Thus QN 23 was selected.

Changing the Qn value alters the precision and range of representable 
numbers in fixed-point arithmetic. Higher Qn values offer more precision 
but a smaller range, which can reduce errors for calculations involving 
small numbers but might introduce overflow for large numbers. Lower Qn 
values increase the range but decrease precision, potentially leading to 
more significant rounding errors. Therefore, the error changes with Qn 
due to the balance between precision and range that it dictates.

When setting QN to 32, the implementation generated multiple warnings related 
to left shift operations exceeding the width of the long data type. This is 
due to the attempt to shift bits beyond the 64-bit limit, which can lead to 
undefined behavior and inaccuracies in calculations. It highlights the 
importance of selecting a QN value that not only provides sufficient precision 
but also stays within the bounds of the data type's bit-width to ensure 
reliable arithmetic operations.

Running sw-float-Test
---------------------
Found the root 0.000101 using soft float bisection.
Elapsed CPU Time (timer) = 9.29 sec.
Elapsed CPU Time per Iteration (timer, 2500000) =  3.72e-06 sec.

The software floating point bisection implementation demonstrated a 
considerably slower performance in comparison to the QN integer bisection 
method. The elapsed CPU time for the soft float bisection was 9.29 seconds, 
which starkly contrasts with the faster times achieved by the integer-based 
approach. 

Debugging and Timing the code
-----------------------------
intTestO0
---------
Found the root 0.000100 using Qn 23 interger bisection.
Elapsed CPU Time timer = 1.35 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.700000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 2.01 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 4.020000e-07 seconds
Qn 23 error= -0.088889

intTestO1
---------
Found the root 0.000100 using Qn 23 interger bisection.
Elapsed CPU Time timer = 1.03 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.060000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 2.10 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 4.200000e-07 seconds
Qn 23 error= -0.088889

intTestO2
---------
Found the root 0.000100 using Qn 23 interger bisection.
Elapsed CPU Time timer = 1.01 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 2.020000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 1.90 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 3.800000e-07 seconds
Qn 23 error= -0.088889

intTestO3
---------
Found the root 0.000100 using Qn 23 interger bisection.
Elapsed CPU Time timer = 0.94 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 1.880000e-07 seconds
Found the root 0.000101 using float bisection.
Elapsed CPU Time timer = 1.89 seconds
Elapsed CPU Time per Iteration (timer, 5000000) = 3.780000e-07 seconds
Qn 23 error= -0.088889

The best performance for the integer bisection algorithm is observed at -O3 
optimization level, which yielded the shortest elapsed CPU time of 0.94 
seconds per 5,000,000 iterations without compromising the accuracy of the 
result.