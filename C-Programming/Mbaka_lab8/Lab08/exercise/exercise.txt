
---------
Line 8
---------

--------------------
Timming from Lab_a.c
--------------------
Elapsed CPU Time Timer = 0.13 seconds
Elapsed CPU Time per Iteration (Timer, 5000) = 2.600000e-05 seconds
Simple alloc: rows and columns: 10000, 100

--------------------
Timing from Lab_c.c
--------------------
Elapsed CPU Time Timer = 0.00 seconds
Elapsed CPU Time per Iteration (Timer, 5000) = 0.000000e+00 seconds
Simple alloc: rows and columns: 10000, 100

-------
Line 9
-------
-----------------
Timing from Lab_a
-----------------
Elapsed CPU Time Timer = 0.13 seconds
Elapsed CPU Time per Iteration (Timer, 5000) = 2.600000e-05 seconds
Simple alloc: rows and columns: 10000, 100

real	0m0.137s
user	0m0.133s
sys	0m0.001s

-------------------
Timing from Lab_c
-------------------
Elapsed CPU Time Timer = 0.00 seconds
Elapsed CPU Time per Iteration (Timer, 5000) = 0.000000e+00 seconds
Simple alloc: rows and columns: 10000, 100

real	0m0.005s
user	0m0.001s
sys	0m0.001s

------------------------------------------------------------
Line 10 - Comparison of lab_a.c and lab_c.c implementations
------------------------------------------------------------
- The faster implementation: lab_c.c is faster than lab_a.c.
- Speed increase: lab_c.c is approximately 100% faster than lab_a.c based on 
the Elapsed CPU Time Timer.
- Correlation with the `time` command: The timing data from the Timers.h macro 
values closely correlate with the results from the Linux `time` command. For 
lab_a.c, the Timers.h reported 0.13 seconds, and the `time` command reported a 
real time of 0.137 seconds. For lab_c.c, both Timers.h and the `time` command 
reported times close to 0.00 seconds, indicating very fast execution, with the 
`time` command showing a slight overhead at 0.005 seconds.

-------------
Line 11
------------
Elapsed CPU Time Timer = 0.00 seconds
Elapsed CPU Time per Iteration (Timer, 2) = 0.000000e+00 seconds
Simple alloc: rows and columns: 10000, 100

Elapsed CPU Time Timer = 0.00 seconds
Elapsed CPU Time per Iteration (Timer, 2) = 0.000000e+00 seconds
Simple alloc: rows and columns: 10000, 100

---------------
Line 12
--------------
==55395== Memcheck, a memory error detector
==55395== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==55395== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==55395== Command: ./lab_a2
==55395== 
Elapsed CPU Time Timer = 0.05 seconds
Elapsed CPU Time per Iteration (Timer, 2) = 2.500000e-02 seconds
Simple alloc: rows and columns: 10000, 100
==55395== 
==55395== HEAP SUMMARY:
==55395==     in use at exit: 0 bytes in 0 blocks
==55395==   total heap usage: 4 allocs, 4 frees, 16,160,000 bytes allocated
==55395== 
==55395== All heap blocks were freed -- no leaks are possible
==55395== 
==55395== For lists of detected and suppressed errors, rerun with: -s
==55395== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


==55430== Memcheck, a memory error detector
==55430== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==55430== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==55430== Command: ./lab_c2
==55430== 
Elapsed CPU Time Timer = 0.01 seconds
Elapsed CPU Time per Iteration (Timer, 2) = 5.000000e-03 seconds
Simple alloc: rows and columns: 3, 5
==55430== 
==55430== HEAP SUMMARY:
==55430==     in use at exit: 0 bytes in 0 blocks
==55430==   total heap usage: 8 allocs, 8 frees, 288 bytes allocated
==55430== 
==55430== All heap blocks were freed -- no leaks are possible
==55430== 
==55430== For lists of detected and suppressed errors, rerun with: -s
==55430== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

--------------
Line 13
--------------

   text	   data	    bss	    dec	    hex	filename
   3174	    604	     16	   3794	    ed2	./lab_a


   text	   data	    bss	    dec	    hex	filename
   3206	    604	     16	   3826	    ef2	./lab_c

--------------
Line 15
--------------

Simple alloc: rows and columns: 3, 3
The 3x3 2D dynamic matrix
 0.0	 0.1	 0.2	
 1.0	999.0	 1.2	
 2.0	 2.1	999.0	

Simple alloc: rows and columns: 3, 3
The 3x3 2D dynamic matrix
 0.0	 0.1	 0.2	
 1.0	999.0	 1.2	
 2.0	 2.1	999.0	

---------------
Line 20 
------------
Elapsed CPU Time MultTimer = 0.74 seconds
Elapsed CPU Time per Iteration (MultTimer, 100000000) = 7.400000e-09 seconds
Elapsed CPU Time PowTimer = 12.73 seconds
Elapsed CPU Time per Iteration (PowTimer, 100000000) = 1.273000e-07 seconds
Elapsed CPU Time HornerTimer = 0.55 seconds
Elapsed CPU Time per Iteration (HornerTimer, 100000000) = 5.500000e-09 seconds
Mult performance, ans 14088.747140
Pow performance, ans 14088.747140
Horner's performance, ans 14088.747140
