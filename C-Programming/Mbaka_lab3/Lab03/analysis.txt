
The process began fixing memory leak in Darray code and the modify the code in pushToDarray to grow by GROWTH_AMOUNT. TestDarray.c is designed to read words from a text file into a dynamic array and then print the first and last N elements based on user input. With the goal of enhancing TestDarray.c, the program was extended to handle command-line arguments using the getopt_long function, allowing users to specify options like the input filename (-i, --in, --input) and the number of words to display (-w, --word), along with a help option (-h, --help).

Initially, the program set a default value of 6 for the number of words to display. When the -w option was used, atoi was used to convert the argument to an integer. However, it was learned that atoi lacks error handling, which could lead to issues if non-numeric values were passed.  It was understood that strtol can be used for better error checking, although there was resistance to moving away from the simplicity of atoi.

A script was used to automate the testing of the program with various combinations of command-line arguments. This script revealed repeated sections in the output, initially thought to be an issue within the program itself. However, it was clarified that the script runs the program multiple times with different arguments, appending each run's output to the same file, out.txt, thus causing the observed repetitions.

Challenges encountered during this process included understanding how command-line arguments are treated as strings in C, necessitating their conversion to the appropriate data type for internal use. Additionally, the distinction between atoi and strtol for this conversion was a point of learning, emphasizing the importance of error handling in robust program design. Another challenge was the initial misinterpretation of repeated output sections as a program error, rather than a result of the testing script's behavior.