
Result from Qsort
-----------------

Usage: ./lab_d <number of entries>
Error: Number of entries must be at least 2
     -49.9        2.1
     -28.0      -12.0
      22.9      -31.6
      22.9       46.9
      26.5       49.2
      39.7       30.2

Usage: ./lab_d <number of entries>

Result from Scanf()
-------------------

==62088== Memcheck, a memory error detector
==62088== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62088== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62088== Command: ././lab_e
==62088== 
The parsing string '%s'

Enter string or 'q' to exit: 1234567

String '1234567' length=7

Enter string or 'q' to exit: 12345678

String '12345678' length=8

Enter string or 'q' to exit: 123456789

==62088== Invalid write of size 1
==62088==    at 0x519442A: _IO_vfscanf (in /usr/lib64/libc-2.17.so)
==62088==    by 0x51A50B8: __isoc99_scanf (in /usr/lib64/libc-2.17.so)
==62088==    by 0x40073C: main (lab_e.c:35)
==62088==  Address 0x5507049 is 0 bytes after a block of size 9 alloc'd
==62088==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
==62088==    by 0x4006DC: main (lab_e.c:18)
==62088== 
==62088== Invalid read of size 1
==62088==    at 0x400748: main (lab_e.c:37)
==62088==  Address 0x5507049 is 0 bytes after a block of size 9 alloc'd
==62088==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
==62088==    by 0x4006DC: main (lab_e.c:18)
==62088== 

==62088== Invalid read of size 1
==62088==    at 0x5186079: vfprintf (in /usr/lib64/libc-2.17.so)
==62088==    by 0x518C4E8: printf (in /usr/lib64/libc-2.17.so)
==62088==    by 0x400760: main (lab_e.c:37)
==62088==  Address 0x5507049 is 0 bytes after a block of size 9 alloc'd
==62088==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
==62088==    by 0x4006DC: main (lab_e.c:18)
==62088== 
String '123456789' length=9

Enter string or 'q' to exit: q

String 'q' length=1
==62088== 
==62088== HEAP SUMMARY:
==62088==     in use at exit: 0 bytes in 0 blocks
==62088==   total heap usage: 1 allocs, 1 frees, 9 bytes allocated
==62088== 
==62088== All heap blocks were freed -- no leaks are possible
==62088== 
==62088== For lists of detected and suppressed errors, rerun with: -s
==62088== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

Line 4
------
Why is “string” malloced with MAX_STR+1 and not just MAX_STR?

Answer: string is malloced with MAX_STR+1 to accommodate the null terminator 
(\0), which is essential for correctly terminating C strings. This ensures 
string handling functions in C, like strlen and printf, can properly determine 
the end of the string.

What output values are printed for each step?

For "1234567": Output: "String '1234567' length=7"
For "12345678": Output: "String '12345678' length=8"
For "123456789": Output: "String '123456789' length=9", followed by memory 
errors.
For "q": Output: "String 'q' length=1"

Does Valgrind report any errors? Why?

Answer: Yes, Valgrind reports errors, specifically invalid write and read 
operations when the input "123456789" is processed. These errors occur because 
this input exceeds the allocated buffer size (MAX_STR+1), leading to buffer 
overflow. This results in writing and reading beyond the allocated memory, 
which is a critical issue causing memory corruption.


Result from Automatically inserting Macro Value MAX_STR
-------------------------------------------------------

==76270== Memcheck, a memory error detector
==76270== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==76270== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==76270== Command: ././lab_e
==76270== 
The parsing string '%8s'

Enter string or 'q' to exit: 1234567

String '1234567' length=7
Enter string or 'q' to exit: 12345678

String '12345678' length=8
Enter string or 'q' to exit: 123456789

String '12345678' length=8
Enter string or 'q' to exit: 
String '9' length=1

Enter string or 'q' to exit: q

String 'q' length=1
==76270== 
==76270== HEAP SUMMARY:
==76270==     in use at exit: 0 bytes in 0 blocks
==76270==   total heap usage: 1 allocs, 1 frees, 9 bytes allocated
==76270== 
==76270== All heap blocks were freed -- no leaks are possible
==76270== 
==76270== For lists of detected and suppressed errors, rerun with: -s
==76270== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Line 7 - Results from Enhanced Scanf() Implementation:
------------------------------------------------------
What output values are printed for each step?

For input "1234567": Outputs "String '1234567' length=7". The string fits well 
within the buffer's limit.
For input "12345678": Outputs "String '12345678' length=8". This uses the 
maximum buffer capacity exactly.
For input "123456789": Outputs two parts:
"String '12345678' length=8" — The first 8 characters are read and the buffer 
is filled.
"String '9' length=1" — The next character '9' remains in the input buffer 
and is read during the next prompt.
For input "q": Outputs "String 'q' length=1". The character 'q' is entered to 
exit the loop, showing correct handling.

Does Valgrind report any errors? Why not?

Valgrind Error Report: Valgrind reports no errors. This indicates that there 
are no memory leaks or buffer overflows.
Reason: The format string '%8s' correctly prevents buffer overflow by limiting 
the input read into the string buffer to 8 characters. Valgrind's clean report 
confirms that the memory management is handled properly—there's appropriate 
allocation and deallocation, and no accesses beyond the allocated memory bounds.

Is there anything “funny” about the output now?

Observation: Yes, there's an interesting behavior noted. When the input 
"123456789" is entered, the program captures the first 8 characters as one 
string and reads the remaining '9' on the next input prompt. This is due to the 
buffer size limitation imposed by the format string.
Explanation: Because the buffer can only hold 8 characters, the ninth character 
('9') remains in the input buffer and is automatically read in the next scanf() 
call. This illustrates a potential issue with non-empty input buffers in 
subsequent reads when inputs exceed buffer sizes, despite no buffer overflows 
occurring.


Result from using -DMAX_STR=7
-----------------------------

==79132== Memcheck, a memory error detector
==79132== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==79132== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==79132== Command: ././lab_e
==79132== 
The parsing string '%7s'

Enter string or 'q' to exit: 1234567

String '1234567' length=7
Enter string or 'q' to exit: 12345678

String '1234567' length=7
Enter string or 'q' to exit: 
String '8' length=1
Enter string or 'q' to exit: 123456789

String '1234567' length=7
Enter string or 'q' to exit: 
String '89' length=2
Enter string or 'q' to exit: q

String 'q' length=1
==79132== 
==79132== HEAP SUMMARY:
==79132==     in use at exit: 0 bytes in 0 blocks
==79132==   total heap usage: 1 allocs, 1 frees, 8 bytes allocated
==79132== 
==79132== All heap blocks were freed -- no leaks are possible
==79132== 
==79132== For lists of detected and suppressed errors, rerun with: -s
==79132== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Line 9 
------
What output values are printed for each step?

For input "1234567": Outputs "String '1234567' length=7". This input exactly 
fills the buffer, utilizing its full capacity.
For input "12345678": Outputs "String '1234567' length=7" for the first 7 
characters. The remaining character '8' is left in the input buffer, and is 
captured in the next prompt, outputting "String '8' length=1".
For input "123456789": Similar to the previous long input, the first 7 
characters are captured, outputting "String '1234567' length=7". The remaining 
characters '8' and '9' are then captured in the following prompt, outputting 
"String '89' length=2".
For input "q": Outputs "String 'q' length=1", indicating the program exits the 
loop cleanly after this input.

Does Valgrind report any errors? Why not?

Valgrind Error Report: No errors are reported by Valgrind, indicating there are 
no memory leaks, buffer overflows, or illegal memory accesses.
Reason: Despite inputs that exceed the buffer size set by MAX_STR, the 
program's use of the format specifier (%7s) in scanf() effectively prevents 
buffer overflows by ensuring no more than 7 characters are read at a time, 
safeguarding against memory corruption.

Is there anything “different” about the output now?

Observation: The main difference noted with the MAX_STR=7 setting compared to 
MAX_STR=8 is the handling of inputs longer than 7 characters. These inputs are 
truncated to fit the buffer size, with excess characters persisting in the 
input buffer and being processed during subsequent input prompts.
Explanation: The output clearly shows how scanf() with %7s handles overflow by 
truncating input to the buffer size and leaving the remainder in the input 
buffer, which is then picked up in the next scanf() invocation.==96863== 
Memcheck, a memory error detector

Result from fgets()
-------------------

==96863== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==96863== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==96863== Command: ././lab_f
==96863== 
Using fgets() to read data:
Read: '1 2 3'
Read: '4    5 6    7     '
Read: '8 9'
Read: ''
Read: ''
Read: ''

Using fscanf() to parse integers:
3 parameters 1 2 3
3 parameters 4 5 6
3 parameters 7 8 9
==96863== 
==96863== HEAP SUMMARY:
==96863==     in use at exit: 0 bytes in 0 blocks
==96863==   total heap usage: 2 allocs, 2 frees, 825 bytes allocated
==96863== 
==96863== All heap blocks were freed -- no leaks are possible
==96863== 
==96863== For lists of detected and suppressed errors, rerun with: -s
==96863== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Comment:
--------

Did fscanf() produce the data you expected and wanted? Is the data really 
correct?

Results from fscanf() parsing:
-----------------------------

First Line: Correctly parsed as "3 parameters 1 2 3".
Second Line: Only the first three numbers "4, 5, 6" were parsed due to fscanf() 
being set to read only three integers, thus ignoring the fourth number "7".
Third Line: The number "7", left unread from the second line, was combined with 
the numbers "8 9" from this line, resulting in "3 parameters 7 8 9".

Analysis:

fscanf() did not parse the data as might be expected. It is programmed to read 
three integers continuously without considering line breaks, leading to 
potential misinterpretation if lines contain more or fewer than three numbers.
It was expected that each line's integers be parsed as separate entities 
especially when lines are visually separated. However, fscanf() ignores 
newlines in its parsing criteria and continues reading until three integers are 
found or the file ends.==102715== Memcheck, a memory error detector



==102715== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102715== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102715== Command: ././lab_g
==102715== 
Using getline() to read data:
Read: '1 2 3'
Read: '4    5 6    7     '
Read: '8 9'
Read: ''
Read: ''
Read: ''

Using fscanf() to parse integers:
3 parameters 1 2 3
3 parameters 4 5 6
3 parameters 7 8 9
==102715== 
==102715== HEAP SUMMARY:
==102715==     in use at exit: 0 bytes in 0 blocks
==102715==   total heap usage: 2 allocs, 2 frees, 688 bytes allocated
==102715== 
==102715== All heap blocks were freed -- no leaks are possible
==102715== 
==102715== For lists of detected and suppressed errors, rerun with: -s
==102715== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==103129== Memcheck, a memory error detector

Comment
-------

1. Was the output of lab_g identical to lab_f?

Yes, the output of lab_g was identical to lab_f. 
Both fgets() and getline() effectively read and displayed data from data.txt in 
the same manner. Each line's content, including those with extra spaces and 
varying numbers of integers, was accurately captured and shown. Subsequent 
parsing with fscanf() also yielded the same results in both versions, 
confirming that fgets() and getline() prepared the data similarly for further 
processing. This consistency shows that despite their different approaches to 
memory management and line reading, both functions can be used interchangeably 
in this context without affecting the output.




Result from strtod()
--------------------

==225042== Memcheck, a memory error detector
==225042== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==225042== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==225042== Command: ./lab_h
==225042== 
Using getline() and strtod() to read and parse data:
Read: '1 2 3'
Value: 1.000000
Value: 2.000000
Value: 3.000000
3 parameters
Read: '4    5 6    7     '
Value: 4.000000
Value: 5.000000
Value: 6.000000
Value: 7.000000
4 parameters
Read: '8 9'
Value: 8.000000
Value: 9.000000
2 parameters
Read: ''
0 parameters
Read: ''
0 parameters
Read: ''
0 parameters
==225042== 
==225042== HEAP SUMMARY:
==225042==     in use at exit: 0 bytes in 0 blocks
==225042==   total heap usage: 2 allocs, 2 frees, 688 bytes allocated
==225042== 
==225042== All heap blocks were freed -- no leaks are possible
==225042== 
==225042== For lists of detected and suppressed errors, rerun with: -s
==225042== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Comment 
-------

The primary difference between lab_g and lab_h lies in their data parsing 
techniques. lab_g uses fscanf() to parse integers directly from the file, which 
requires the data to follow a strict format of three integers per line. This 
approach is less flexible and can lead to parsing errors if the data deviates 
from this format.

On the other hand, lab_h employs getline() in conjunction with strtod(), which 
allows for dynamic parsing of floating-point numbers from a buffer. This method 
is more robust and flexible, effectively handling lines with variable numbers 
of elements and different spacing between numbers. strtod() also manages 
irregular data formats better by continuously parsing numbers until the end of 
each line, making it suitable for files with non-uniform data structures.

The use of strtod() in lab_h provides enhanced error handling capabilities and 
greater adaptability to varied data inputs, making it a more versatile solution 
in scenarios where data consistency and format can vary.